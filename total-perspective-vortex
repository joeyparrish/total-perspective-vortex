#!/usr/bin/env python3

"""Total Perspective Vortex
configures services based on templates and a YAML config file.
Designed with routers and local networks in mind.

Copyright (C) 2018 Joey Parrish <joey.parrish@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import argparse
import jinja2
import os
import subprocess
import sys
import yaml

MIN_PYTHON_VERSION = (3, 6)
MIN_PYTHON_VERSION_STR = '.'.join([str(x) for x in MIN_PYTHON_VERSION])
if sys.version_info[0:2] < MIN_PYTHON_VERSION:
  print('Total Perspective Vortex requires Python v%s+!' % MIN_PYTHON_VERSION_STR)
  sys.exit(1)

DEFAULT_TEMPLATE_FOLDER = '/etc/total-perspective-vortex/templates'
DEFAULT_CONFIG_FILE = '/etc/total-perspective-vortex/config.yaml'

def get_templates(args):
  for template in os.listdir(args.template_folder):
    # Skip hidden files and swap files, so that you can edit templates
    # and reprocess them rapidly.
    if template[0] == '.': continue

    yield os.path.join(args.template_folder, template)

def get_config(args):
  with open(args.config_file) as f:
    return yaml.safe_load(f)

def process_template(args, config, template_path, service_reloads):
  print('Processing template %s' % template_path, file=sys.stderr);

  with open(template_path, 'rb') as f:
    template = jinja2.Template(f.read().decode('utf-8'))

  # This renders the template, but also makes outputs from the template
  # available to us through |module|.
  module = template.make_module(vars=config)
  rendered = str(module).strip() + '\n'

  output_path = getattr(module, 'output_path', None)
  output_mode = int(getattr(module, 'output_mode', '644'), 8)
  service_reload = getattr(module, 'service_reload', None)

  if not output_path:
    print('No output path specified in %s' % template_path, file=sys.stderr)

  if not service_reload:
    print('No service reload specified in %s' % template_path, file=sys.stderr)

  if args.diff:
    subprocess.run(['diff', '-Nu', output_path, '-'],
                   input=rendered.encode('utf8'))
  elif args.stdout:
    print(rendered)

  if args.dry_run or args.stdout or args.diff:
    # These all mean we should skip the output and reload phases.
    return

  if output_path:
    with open(output_path, 'wb') as f:
      f.write(rendered.encode('utf-8'))
    os.chmod(output_path, output_mode)

  if service_reload:
    service_reloads.add(service_reload)

def process_templates(args, config, service_reloads):
  for template_path in get_templates(args):
    process_template(args, config, template_path, service_reloads)

def process_reloads(args, service_reloads):
  if args.dry_run:
    print('Dry run, not reloading services.', file=sys.stderr)
  else:
    for service_reload in service_reloads:
      print('Reloading: %s' % service_reload, file=sys.stderr)
      subprocess.check_call(service_reload, shell=True)

def main(argv):
  description = __doc__.split('\n\n')[0]
  parser = argparse.ArgumentParser(description=description)
  parser.add_argument('--template-folder', '-t', default=DEFAULT_TEMPLATE_FOLDER,
                      help='The path to your configuration templates.')
  parser.add_argument('--config-file', '-c', default=DEFAULT_CONFIG_FILE,
                      help='The path to your master configuration file.')

  output_group = parser.add_mutually_exclusive_group()
  output_group.add_argument('--dry-run', action='store_true',
                            help='Check the templates for errors, but do not ' +
                           'write output files and do not reload any services.')
  output_group.add_argument('--stdout', action='store_true',
                            help='Write rendered templates to stdout. ' +
                           'Implies --dry-run.')
  output_group.add_argument('--diff', action='store_true',
                            help='Diff rendered templates against existing ' +
                           'output files. Implies --dry-run.')

  args = parser.parse_args(argv[1:])

  config = get_config(args)
  service_reloads = set()

  process_templates(args, config, service_reloads)
  process_reloads(args, service_reloads)

if __name__ == '__main__':
  main(sys.argv)
